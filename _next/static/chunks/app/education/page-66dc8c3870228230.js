(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[651],{1036:(e,t,i)=>{"use strict";i.d(t,{default:()=>p});var n=i(5155),a=i(2115),r=i(2269),s=i(2861),o=i(2966),l=i(4146),d=i(2422),c=i(5358),m=i(9608);let u=[{id:26,src:"/images/26.jpg",alt:"Machine Learning Classifiers",description:"This program compares several supervised machine learning classifiers on a common dataset. It splits the data into training and testing sets, trains each classifier, tests them, and displays the accuracy with a visual representation of the decision boundaries."},{id:25,src:"/images/25.jpg",alt:"Line Equation Calculation",description:"For my final project in a computer architecture class, I decided to write my assembly program as one that would calculate the y=mx+b formula of a line based on two sets of x and y coordinates that lie on the line. I had to write all of the math functions, including division, manually with 2's complement 'and', 'or', and 'not' combinations. The program is limited to lines with slopes that are multiples of 0.5 and single digit inputs for x and y, but even with some of the limitations, this simple program required more than 700 lines of assembly code for the prompts, calculation, and output."}];function p(){let[e,t]=(0,a.useState)(!1),[i,p]=(0,a.useState)(null),g=e=>{p(e),t(!0)},h=()=>{t(!1),p(null)};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.default,{sx:{display:"grid",gridTemplateColumns:{xs:"1fr",md:"1fr 1fr"},gap:2,paddingY:1,padding:{xs:"1.5rem",md:"1rem"},paddingTop:"2rem",width:"100%"},children:u.map(e=>(0,n.jsx)(r.default,{sx:{display:"flex",justifyContent:"center"},children:(0,n.jsx)(r.default,{component:"img",src:e.src,alt:e.alt,onClick:()=>g(e),sx:{height:{xs:200,md:400},width:{xs:"100%",md:"97%"},objectFit:"cover",borderRadius:2,boxShadow:2,cursor:"pointer"}})},e.id))}),(0,n.jsxs)(s.A,{open:e,onClose:h,maxWidth:"md",fullWidth:!0,children:[(0,n.jsxs)(o.A,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[null==i?void 0:i.alt,(0,n.jsx)(l.A,{onClick:h,children:(0,n.jsx)(m.A,{})})]}),(0,n.jsxs)(d.A,{children:[(0,n.jsx)(r.default,{component:"img",src:null==i?void 0:i.src,alt:null==i?void 0:i.alt,sx:{width:"100%",maxHeight:500,objectFit:"contain",borderRadius:2}}),(0,n.jsx)(c.default,{variant:"body1",mt:2,children:null==i?void 0:i.description})]})]})]})}},2832:(e,t,i)=>{"use strict";i.d(t,{O:()=>n,b:()=>a});let n=[{title:"Vision-Based Drone Navigation",description:"Working with another student in my class, we made a program that will serve as a core utility in the autonomous navigation of a drone. The program takes a downward-looking image from the drone and applies a number of filtering and matching techniques in order to determine where the drone's image matches with onboard satellite imagery. The matching location in the satellite image can be used to extract approximate coordinates for the drone in real time. Because the satellite imagery can be stored on the drone, the drone gains a large amount of autonomous abilities. After pairing with other positioning techniques (like IMU integration), I expect a drone flying a few hundred feet in the air should be able to complete waypoint missions without reliance on GNSS.",githubLink:"https://gitlab.com/tylrhnry/drone-nav",course:"CS 4700 Machine Learning",featured:!0},{title:"GPS Spoofing Detection",description:"I wrote a Rust program that, when coupled with common drone hardware (GPS and IMU), can work to detect artificial GPS signals meant to attack the drone. The program performs an integration on the accelerometer and gyroscope readings to estimate its relative position since the last verified location. If the new location is within the margin of error of the received GPS readings, we assume the drone is still receiving accurate GPS data. If the drone starts receiving GPS data that suggests it has been moving contrary to what the IMU has measured, we assume the GPS data is inaccurate. When validation is frequently performed, the sensor error can be continuously removed, leading to more accurate detection of adversarial signals.",githubLink:"https://github.com/tylrhnry/gps_spoofing_detection",course:"339R (Advanced Programming Language (Rust))",featured:!0},{title:"Missile Defense System",description:"This missile defense simulator was created from scratch to teach the Rust programming language to dozens of interns and professional C++ developers at the Air Force. This program simulates and visualizes enemy and interceptor missiles. The enemy missile can be given a non-linear path to complicate targeting from the interceptor. Currently, the path prediction is rudimentary, and I would like to add spline regression and a binary search on the predicted path to allow for quicker interception and realistic range limits.",githubLink:"https://github.com/tylrhnry/missile_defense_sim",course:"Personal",featured:!0},{title:"Compiler",description:"Written in Rust, this compiler was written from scratch to do the lexing, parsing, semantic analysis, and assembly code generation of a language with the most common features of the C++ programming language. The assembly code generated targets the assembler I wrote as part of the precursor class, which then assembles the code into byte code that runs on a virtual machine I programmed in C++.",githubLink:"N/A",course:"4490 (Compiler Construction)",featured:!0},{title:"Home Server",description:'Meant as a file server and backup, as well as a platform to self-host a number of other services, this computer has a large reliability requirement. As such, the hardware has substantial power for the programs it will run, including a 32-thread CPU, error-correcting ECC memory, and large hard drives in a ZFS mirror to provide filesystem-based error correction and account for potential hard drive failures.\n    The software shares a declarative Nix configuration with my other computers to persist my updates and configuration settings across all my machines, making development extremely consistent. \n    The declarative approach is a dream to work with. Any update or progress I make on any machine can seamlessly be applied to all of my systems, completely removing repetitive configuration, which when setting up and working with many systems, is a huge deal. Backups are extremely simple. Software development and builds are managed the same way, removing the "It works on my machine" problem, and is a consistent tool across languages.',githubLink:"",course:"",featured:!1},{title:"Endurance VTOL Drone",description:"This plane is still in the early stages of development. I am currently converting my paper designs to CAD models in FreeCAD and assembling the components I have built. The primary purpose of the drone is visual and radio surveillance. I'm taking a very math-focused approach to the design and component selection, which has taught me quite a bit more than my prior drone builds that are less optimised or built with generic components. I'm attempting to maximize endurance on a platform that is compact when disassembled and modular in the motor and payload configurations.\n    The plane is being designed to allow vertical takeoff and landing. The primary configuration with have a 2-meter wingspan and should have a total wet weight of 6-8kg depending on payload.\n    ",githubLink:"",course:"",featured:!1},{title:"This Website",description:"This website is written in Typescript, using React and NextJS. It is hosted by my home server and Github Pages for redundancy. The development and build environment is kept reproducible using Nix.",githubLink:"https://github.com/tylrhnry/tylrhnry.github.io",course:"",featured:!1},{title:"Assembler",description:"Written in Python, this assembler targets the virtual machine I wrote in C++ and converts assembly code into bytecode. It does error checking of the assembly code, implements a traditional stack and heap memory model. Example programs demonstrate the use of stack frames, recursion, heap memory management.",githubLink:"N/A",course:"4380 (Advanced Computer Architecture and Assembly)",featured:!1},{title:"Virtual Machine",description:'I wrote a program in C++ that can read byte code (binary data) and execute it as if it is the hardware of a machine. This virtual machine implemented three different caching types that are implemented "in hardware" and abstracted from the assembly programmer. Cmake and Google testing framework were used for building and testing.',githubLink:"N/A",course:"4380 (Advanced Computer Architecture and Assembly)",featured:!1},{title:"Rust-C++ binding",description:"Rust is often a great language to use in scenarios where C and C++ are appropriate, however, complete rewrites are frequently unwise. Implementing new code or replacing small sections, however, might be found to be desirable. Luckily, Rust incorporates with C/C++ very nicely. This project implements a simple linear algebra library and performs cross-language compilation and function calls. The ability to depend on the great legacy and support of C, as well as incorporating the strong behavioral guarantees of Rust is an incredibly useful tool for embedded development.",githubLink:"N/A",course:"339R (Advanced Programming Language (Rust))",featured:!0}],a=n.filter(e=>e.featured)},4618:(e,t,i)=>{"use strict";i.d(t,{default:()=>p});var n=i(5155),a=i(2115),r=i(2269),s=i(2861),o=i(2966),l=i(4146),d=i(2422),c=i(5358),m=i(9608);let u=[{id:19,src:"/images/19.jpg",alt:"Mandelbrot Fractal",description:"This program started as a simple image generator that used a common command-line parsing library to customize the quality and location shown of this popular fractal. This project was later incorporated into web servers we wrote in Rust, where the server would provide the fractal image with the custom quality, zoom, and location based on arguments passed in the URL."},{id:22,src:"/images/22.jpg",alt:"Missile Defense Simulator",description:"This was some trigonometry that was being performed to figure out how to give a simulated \"enemy missile\" a non-linear path. The missile simulation was created as a project to teach coworkers the basics of the Rust programming language. In this step of augmenting the program, we converted the flight path of our enemy missile from a linear one to one that followed a sinusoidal path. This would later be used to complicate our interceptor missile's task of efficiently destroying the enemy missile. The training was ultimately too short to implement these more complicated tasks, though for other projects, path prediction is still something I'm interested in, so I may come back to add that feature."}];function p(){let[e,t]=(0,a.useState)(!1),[i,p]=(0,a.useState)(null),g=e=>{p(e),t(!0)},h=()=>{t(!1),p(null)};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.default,{sx:{display:"grid",gridTemplateColumns:{xs:"1fr",md:"1fr 1fr"},gap:2,paddingY:1,padding:{xs:"1.5rem",md:"0rem"},paddingTop:"2rem",paddingBottom:"2rem",width:"100%"},children:u.map(e=>(0,n.jsx)(r.default,{sx:{display:"flex",justifyContent:"center"},children:(0,n.jsx)(r.default,{component:"img",src:e.src,alt:e.alt,onClick:()=>g(e),sx:{height:{xs:200,md:400},width:{xs:"100%",md:"97%"},objectFit:"cover",borderRadius:2,boxShadow:2,cursor:"pointer"}})},e.id))}),(0,n.jsxs)(s.A,{open:e,onClose:h,maxWidth:"md",fullWidth:!0,children:[(0,n.jsxs)(o.A,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[null==i?void 0:i.alt,(0,n.jsx)(l.A,{onClick:h,children:(0,n.jsx)(m.A,{})})]}),(0,n.jsxs)(d.A,{children:[(0,n.jsx)(r.default,{component:"img",src:null==i?void 0:i.src,alt:null==i?void 0:i.alt,sx:{width:"100%",maxHeight:500,objectFit:"contain",borderRadius:2}}),(0,n.jsx)(c.default,{variant:"body1",mt:2,children:null==i?void 0:i.description})]})]})]})}},6239:(e,t,i)=>{"use strict";i.d(t,{default:()=>o});var n=i(5155),a=i(2115),r=i(6766),s=i(2269);let o=()=>{let[e,t]=(0,a.useState)("/images/UVUHorizontalGreen.png"),[i,o]=(0,a.useState)(560),l=()=>{window.matchMedia("(max-width: 899px)").matches?(t("/images/UVUSquareGreen.png"),o(192)):(t("/images/UVUHorizontalGreen.png"),o(560))};return(0,a.useEffect)(()=>(l(),window.addEventListener("resize",l),()=>{window.removeEventListener("resize",l)}),[]),(0,n.jsx)(s.default,{sx:{display:"flex",justifyContent:"flex-start",alignItems:"center",padding:0},children:(0,n.jsx)(r.default,{src:e,alt:"UVU Logo",width:i,height:i*(e.includes("Square")?1:.3),style:{objectFit:"contain"}})})}},8507:(e,t,i)=>{Promise.resolve().then(i.bind(i,2269)),Promise.resolve().then(i.bind(i,2693)),Promise.resolve().then(i.bind(i,5358)),Promise.resolve().then(i.bind(i,8780)),Promise.resolve().then(i.bind(i,4618)),Promise.resolve().then(i.bind(i,1036)),Promise.resolve().then(i.bind(i,6239))},8526:(e,t,i)=>{"use strict";i.d(t,{A:()=>p});var n=i(5155);i(2115);var a=i(532),r=i(8358),s=i(5358),o=i(158),l=i(912),d=i(2269),c=i(7764),m=i(5857),u=i(821);let p=e=>{var t;let{title:i,description:p,githubLink:g,index:h,nestLevel:f,isExpanded:y,onExpandChange:b}=e;return t=f%2==0?h%2==0?"primary.light":"primary.dark":h%2==0?"secondary.light":"secondary.dark",(0,n.jsxs)(a.A,{sx:{backgroundColor:t},expanded:y,onChange:()=>b(!y),children:[(0,n.jsx)(r.A,{expandIcon:(0,n.jsx)(u.A,{}),children:(0,n.jsx)(s.default,{children:i})}),(0,n.jsx)(o.default,{}),(0,n.jsxs)(l.A,{children:[(0,n.jsx)(s.default,{sx:{whiteSpace:"pre-line"},children:p}),(0,n.jsx)(d.default,{sx:{display:"flex",justifyContent:"center"},children:"N/A"===g||""===g?"N/A"===g&&(0,n.jsx)(s.default,{sx:{display:"flex",flexDirection:"column",alignItems:"center",textAlign:"center",marginTop:"0.6rem",padding:"0 0.5rem 0.3rem 0.5rem",borderRadius:"0.2rem",border:"1px solid black",width:"fit-content"},children:"Due to plagiarism concerns, I cannot publicly link this project."}):(0,n.jsx)(c.A,{href:g,target:"_blank",rel:"noopener noreferrer",sx:{display:"flex",flexDirection:"column",alignItems:"center",paddingTop:"1rem",textDecoration:"none"},children:(0,n.jsx)(m.A,{variant:"contained",sx:{backgroundColor:"secondary.main","&:hover":{backgroundColor:"primary.main"},display:"flex",alignItems:"center"},children:"View on GitHub/GitLab"})})})]})]})}},8780:(e,t,i)=>{"use strict";i.d(t,{default:()=>A});var n=i(5155),a=i(2115),r=i.t(a,2),s=i(3746),o=i(5594),l=i(8155),d=i(1101),c=i(7934);let m=(0,o._)({},r).useSyncExternalStore;function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{themeId:t}=e;return function(e){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(0,c.A)();n&&t&&(n=n[t]||n);let r="undefined"!=typeof window&&void 0!==window.matchMedia,{defaultMatches:s=!1,matchMedia:o=r?window.matchMedia:null,ssrMatchMedia:u=null,noSsr:p=!1}=(0,d.A)({name:"MuiUseMediaQuery",props:i,theme:n}),g="function"==typeof e?e(n):e;return(g=g.replace(/^@media( ?)/m,"")).includes("print")&&console.warn("MUI: You have provided a `print` query to the `useMediaQuery` hook.\nUsing the print media query to modify print styles can lead to unexpected results.\nConsider using the `displayPrint` field in the `sx` prop instead.\nMore information about `displayPrint` on our docs: https://mui.com/system/display/#display-in-print."),(void 0!==m?function(e,t,i,n,r){let s=a.useCallback(()=>t,[t]),o=a.useMemo(()=>{if(r&&i)return()=>i(e).matches;if(null!==n){let{matches:t}=n(e);return()=>t}return s},[s,e,n,r,i]),[l,d]=a.useMemo(()=>{if(null===i)return[s,()=>()=>{}];let t=i(e);return[()=>t.matches,e=>(t.addEventListener("change",e),()=>{t.removeEventListener("change",e)})]},[s,i,e]);return m(d,l,o)}:function(e,t,i,n,r){let[s,o]=a.useState(()=>r&&i?i(e).matches:n?n(e).matches:t);return(0,l.A)(()=>{if(!i)return;let t=i(e),n=()=>{o(t.matches)};return n(),t.addEventListener("change",n),()=>{t.removeEventListener("change",n)}},[e,i]),s})(g,s,o,u,p)}}u();let p=u({themeId:i(5257).A});var g=i(2269),h=i(5358),f=i(2693);let y=[{title:"Compiler Construction",courseCode:"4490",description:"Builds on software created in CS 4380. Presents concepts necessary to create a modern compiler. Reinforces theoretical and practical software development skills from previous courses through an immersive, expressive approach to compiler construction."},{title:"Deep Learning in Action",courseCode:"439R",description:"Teaches modern deep learning theory. Requires solving a real-world problem using applied teachings. Students develop and extend local, customized LLM's from open-source ML tools."},{title:"Machine Learning",courseCode:"4700",description:"Explores the philosophy, utility, mathematics and algorithms of machine learning in order to understand the basic concepts and issues at the heart of machine learning. Covers the implementation and use of machine learning algorithms to solve real-world problems or to pursue a graduate program. Includes feature selection and extraction, decision trees, neural networks, nearest-neighbors, support vector machines, naive Bayes classifier, clustering, ensembles, reinforcement learning and deep learning."},{title:"Security and Vulnerability Analysis",courseCode:"4120",description:"Presents a methodology for attacking, assessing, analyzing, categorizing, and remediating security weaknesses in software and software systems. Develops insight into system architecture, process execution, operating systems, and error conditions that create opportunities for attack surfaces. Develops the ability to scan and exploit popular third-party applications rather than simulated lab exercises. Emphasizes writing and running working exploits and payloads."},{title:"SolidWorks Modeling",courseCode:"EDGT 1071",description:"Teaches basic 3D computer modeling, which emphasizes the development of 3D machine parts, assemblies, and drawings in a constraint-based modeling environment using SolidWorks. Emphasizes the feature based design process, which simulates actual manufacturing processes with 2D sketching tools and with 3D modeling tools including extrusions, revolutions, sweeps, lofts, coils, shells, placed features, patterns, and many others. Also teaches creation of basic multi-part assemblies, constraint-driven assembly animation, and generation of detailed production drawings."},{title:"Analysis of Programming Languages",courseCode:"4450",description:"Offers the mature student an in-depth understanding of the design and implementation of programming languages. Explores criteria for evaluating programming languages as a context for comparing both traditional and current popular languages. Includes the evolution of programming languages, the concept of binding, type checking, static and dynamic scoping, control structures, subprograms and parameter passing methods, and concurrency. Explores the functional programming paradigm in-depth. Includes programming assignments in at least two different programming languages, at least one of which being a functional language such as LISP, Scheme, ML, or Haskell."},{title:"Advanced Computer Architecture and Assembly",courseCode:"4380",description:"Presents theory and concepts of high-performance computer architectures. Includes digital logic, buses, registers, ALU's, control units, pipelining, parallelism, DASD's, SASD's, RAID, caching, instruction-sets, memory hierarchy, multiprocessing, interconnection via networks."},{title:"Artificial Intelligence",courseCode:"4470",description:"Presents theory, organization, concepts, and principles of artificial intelligence methodologies including neural networks, expert systems, machine learning algorithms, and genetic algorithms."},{title:"Rust (Advanced Programming Language Other)",courseCode:"339R",description:"Introduces and explores state-of-the-art programming languages and concepts such as language-specific syntax, operational semantics, libraries, idioms, integrated development environments, and debugging techniques. Demonstrates language concepts by developing and writing programs. "},{title:"C++ Software Development",courseCode:"3370",description:"Teaches C++ programming in a production environment, emphasizing mastery of the standard C++ library. Covers the following topics in-depth: const correctness, operator overloading, exception handling, exception-safe design, programming with assertions, automated unit testing, advanced memory management, generic programming with templates, containers, iterators, algorithms, concurrency, and functional programming. Introduces library development, common idioms, and other advanced topics. Emphasizes accepted software engineering practices."},{title:"C++ Programming",courseCode:"2370",description:"Introduces C++ programming for students with prior programming experience. Covers language fundamentals, core standard library components, error handling, value semantics, pointers and memory management, object-oriented programming, and templates."},{title:"Python Software Development",courseCode:"3270",description:"Covers the features of the Python programming language. Includes scripting, dynamic typing, data types (sequences, sets, mappings, files, etc.), loops, iterators, generators, functions, coroutines, classes and objects, modules, packages and scope, runtime services, data wrangling, concurrent programming, etc."},{title:"Sofware Engineering",courseCode:"2450",description:'Presents concepts, methodology and best-practices necessary to develop large scale software projects. Includes step-wise software requirements analysis, design, implementation, testing and release. Discusses software generation, reuse, scheduling, verification, and maintenance. Emphasizes current "real world" industry best-practices and tools.'},{title:"Numerical Software Development",courseCode:"3320",description:"Teaches the tools necessary for modern scientific computation. Covers computer representation of floating-point numbers, error analysis and numerical stability, IEEE floating-point standards, testing of numerical algorithms, calculation of elementary functions, roots of equations, solutions of linear systems, numerical integration and differentiation, interpolation and approximation, Monte Carlo methods."},{title:"Analysis of Algorithms",courseCode:"3310",description:"Develops and reinforces ability to write and mathematically analyze foundational computer algorithms. Includes formalizing NP-completeness, divide and conquer strategies, greedy algorithms, dynamic programming, backtracking, branch and bound, approximation algorithms and multicore parallelization."},{title:"Operating Systems Theory",courseCode:"3060",description:"Introduces the Unix operating system. Presents the underlying theory and concepts of an operating system, and covers the following topics in depth: device management, processes, threads, synchronization, scheduling, deadlocks, memory management, virtual memory, and file systems. Provides practical experience in writing programs that use standard Unix system calls to interface directly with the operating system."},{title:"Discrete Math II",courseCode:"3240",description:"Presents concepts from discrete mathematics including formal languages, and automata, including Turing machines, regular expressions, grammars, and computability."},{title:"Database Theory (SQL)",courseCode:"3520",description:"Introduces the underlying theories of Relational Database Management Systems (RDBMS) as well as their practical use retrieving data using both embedded SQL and relational algebra. Implements queries that start from simply joining, selecting, and projecting data, then progresses to more complex data retrieval techniques that require the use of set operations, sub-queries, and group by having clauses. Discusses entity-relationship (ER) modeling, creating a RDBMS from an ER model, B+ Trees, ACID transactions, normalization, locking, concurrency issues, and alternatives to an RDBMS."},{title:"Web Development",courseCode:"2550",description:"Covers design and development of browser-based programs with an emphasis on single-page applications. Teaches generation and modification of HTML via JavaScript, debugging techniques, communicating with web servers, and use of XML and JSON."},{title:"Discrete Math I",courseCode:"2300",description:"Covers algebraic structures applied to computer programming. Includes logic, sets, elementary number theory, mathematical induction, recursion, algorithm complexity, combinatorics, relations, graphs, and trees."},{title:"Object-Oriented Programming",courseCode:"1410",description:"Teaches proper program structure using the core concepts of object-oriented programming: classes, objects, encapsulation, inheritance and polymorphism. Presents problems of increasing size and complexity requiring OOP techniques, standard libraries and other appropriate language constructs."},{title:"Computer Organization and Architecture",courseCode:"2810",description:"Uses assembly language to introduce basic concepts of computer organization. Includes number systems, CPU organization, instruction sets, programming in assembly, memory organization, debugging, program design, and documentation. Covers interrupts, vector tables, and disk I/O."},{title:"Calculus",courseCode:"MATH 1210",description:"Covers limits, continuity, differentiation, applications of differentiation, integration, and applications of integration, including derivatives and integrals of polynomial functions, rational functions, exponential functions, logarithmic functions, trigonometric functions, inverse trigonometric functions, and hyperbolic functions. Is a prerequisite for calculus-based sciences."},{title:"Applied Probability and Statistics",courseCode:"ECE 3710",description:"Explores probability and statistical theory with an emphasis on engineering and computer science applications. Covers descriptive statistics, discrete and continuous random variables, probability distributions, hypothesis testing, expectation, estimation, ANOVA testing, and regression analysis. Includes computer analysis of data and simulation."},{title:"Linux System Administration",courseCode:"IT 1510",description:"Introduces administering Linux/UNIX Operating Systems including managing of software and services, configuration of kernel modules, network parameters, storage, cloud and virtualization technologies. Explores OS/software installation, managing daemons, user creation, file management, permissions, authentication, troubleshooting, system properties and processes, automation, scripting, orchestration, and security/server best practices."},{title:"Data Privacy and Security",courseCode:"3100",description:"Covers the fundamental theory, concepts and practical applications of computer security. Includes networking fundamentals, cryptography, authentication and authorization, access control, malware, physical security, computing systems hardening, threat detection and response, secure code, and secure applications development. Emphasizes developing, deploying, and maintaining a secure computing infrastructure with a hands-on approach."},{title:"Computer Networking I",courseCode:"2600",description:"A rigorous introduction to computer networking theory and technologies for Computer Science and Information Technology majors. Includes theory of data communications protocols; theory and design of transmission systems; transmission media; and communication software. Emphasizes the lower layers of the Open Systems Interconnection model. Requires lab exercises to be completed outside of lecture."},{title:"Computer Networking II",courseCode:"2690",description:"Continues CS 2600 Computer Networks I. Focuses on the upper layers of the OSI and Internet models. Covers Internet (TCP/IP) protocols, routing theory, transport protocols, network application interfaces, presentation formatting, information theory and compression, cryptography, and other emerging technologies as time permits. Requires lab exercises and programming assignments to be completed outside of lecture."}];var b=i(532),v=i(8358),w=i(158),x=i(912),C=i(821),k=i(2832),j=i(8526);let I=e=>{let{title:t,courseCode:i,description:r,visualRow:s,nestLevel:o,isExpanded:l,onExpandChange:d}=e,[c,m]=(0,a.useState)(null),u=(e,t)=>{m(t?e:null)};return(0,n.jsxs)(b.A,{sx:{backgroundColor:o%2==0?s%2==0?"primary.light":"primary.dark":s%2==0?"secondary.light":"secondary.dark"},expanded:l,onChange:()=>d(!l),children:[(0,n.jsx)(v.A,{expandIcon:(0,n.jsx)(C.A,{}),children:(0,n.jsx)(h.default,{children:t})}),(0,n.jsx)(w.default,{}),(0,n.jsxs)(x.A,{children:[(0,n.jsx)(h.default,{sx:{whiteSpace:"pre-line"},children:r}),k.O.filter(e=>e.course===i).map((e,t)=>(0,n.jsx)(j.A,{title:e.title,description:e.description,githubLink:e.githubLink,index:t,nestLevel:1,isExpanded:t===c,onExpandChange:e=>u(t,e)},t))]})]})},A=()=>{let[e,t]=(0,a.useState)(null),[i,r]=(0,a.useState)(null),o=p((0,s.A)().breakpoints.down("sm")),l=(e,i)=>{t(i?e:null)},d=(e,t)=>{r(t?e:null)},c=Math.ceil(y.length/2),m=y.slice(0,c),u=y.slice(c);return(0,n.jsxs)(g.default,{children:[(0,n.jsx)(h.default,{variant:"h5",gutterBottom:!0,sx:{paddingTop:"1.5rem",paddingLeft:"1.5rem"},children:"Relevant Courses"}),o?(0,n.jsx)(f.default,{disableGutters:!0,sx:{padding:"1.5rem",paddingTop:0},children:y.map((t,i)=>(0,n.jsx)(I,{title:t.title,courseCode:t.courseCode,description:t.description,visualRow:i,nestLevel:0,isExpanded:i===e,onExpandChange:e=>l(i,e)},i))}):(0,n.jsxs)(f.default,{maxWidth:"xl",disableGutters:!0,sx:{display:"flex",flexDirection:"row",alignItems:"start"},children:[(0,n.jsx)(f.default,{disableGutters:!0,sx:{flex:1,margin:0,padding:"1.5rem",paddingTop:0},children:m.map((t,i)=>(0,n.jsx)(I,{title:t.title,courseCode:t.courseCode,description:t.description,visualRow:i,nestLevel:0,isExpanded:i===e,onExpandChange:e=>l(i,e)},i))}),(0,n.jsx)(f.default,{disableGutters:!0,sx:{flex:1,margin:0,padding:"1.5rem",paddingTop:0},children:u.map((e,t)=>{let a=t+c;return(0,n.jsx)(I,{title:e.title,courseCode:e.courseCode,description:e.description,visualRow:a,nestLevel:0,isExpanded:a===i,onExpandChange:e=>d(a,e)},a)})})]})]})}}},e=>{var t=t=>e(e.s=t);e.O(0,[407,530,473,250,766,441,684,358],()=>t(8507)),_N_E=e.O()}]);